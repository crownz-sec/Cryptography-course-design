import hashlib
import gmpy2
import libnum   #可以轻松实现字符串转换数字和数字转换字符串

p=101942587854363976603773089638661229954674164536815272101089075291418583657075345602499590940653450192125670344662889730448774702763827967953828085204006034224613905034630214208375129277820854473718575816717845667734679781295472070807934058391084020848679992560703520147697912660923208271437786997863236911291

q=179379389114830514615735898008045529882536829305246612104756832839900429482513948254326736202720851976809878324181126406561327002710632078072215415649487858978178319190662606031443760627142838241326243997987756030704520460307102652454303094183956884804747592648567143035247458915776999576432354852236078456753

e=65537
phi=(p-1)*(q-1)
d=gmpy2.invert(e,phi)
print(d)
def Md5(num):   
    md5=hashlib.md5()
    num = str(num).encode('utf-8')#num是一个数字，要转换成md5函数能处理的bytes，必须用这样的形式
    md5.update(num)         #转为str，再utf-8编码
    return md5.hexdigest()               
print("加密后:",Md5(d))

p=13574881
q=23781539
phi=(p-1)*(q-1)
n=p*q
e=65537
d=gmpy2.invert(e,phi)
print(gmpy2.invert(e*d,phi))
c=int(0x7b4b99e080eb)
m=pow(c,d,n)        #解密内容
print(m)
print(libnum.n2s(m))
print(pow(m,e,n),c)   

def md5(s):
    md5 = hashlib.md5()
    md5.update(s.encode('utf-8'))
    return md5.hexdigest()
cookie = '0e4f8e8f-35a4-44a3-a3cc-39b35546d0f8'
filename = '/fllllllllllllag'
print(md5(cookie+md5(filename)))
